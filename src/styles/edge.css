/* SVG Container */
#canvas-edges {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
    overflow: visible;
    will-change: transform;
    transform-origin: 0 0;
    backface-visibility: hidden;
    transform: translate3d(0,0,0);
}

/* SVG Group */
#canvas-edges g {
    pointer-events: none;
    transform-origin: 0 0;
    transform: translate3d(0,0,0);
}

/* Edge Paths */
.edge-path {
    stroke: #000;
    stroke-width: 1.5;
    fill: none;
    pointer-events: all;
    transition: stroke 0.2s, stroke-width 0.2s, filter 0.2s;
    paint-order: stroke;
    shape-rendering: geometricPrecision;
    vector-effect: non-scaling-stroke;
    will-change: d;
}

.edge-path:hover,
.edge-path.hovered {
    stroke: #3b82f6;
    stroke-width: 2;
    filter: drop-shadow(0 0 2px rgba(59, 130, 246, 0.3));
}

.edge-path.selected {
    stroke: #3b82f6;
    stroke-width: 2;
    filter: drop-shadow(0 0 3px rgba(59, 130, 246, 0.5));
}

/* Preview path styling */
.edge-preview {
    stroke-dasharray: 5,5;
    animation: dash 1s linear infinite;
    pointer-events: none;
    vector-effect: non-scaling-stroke;
}

@keyframes dash {
    to {
        stroke-dashoffset: -20;
    }
}

/* Hit Area */
.edge-hit-area {
    stroke: transparent;
    stroke-width: 20;
    fill: none;
    pointer-events: all;
    cursor: pointer;
    vector-effect: non-scaling-stroke;
}

/* Anchor Points */
.anchor-point {
    position: absolute;
    width: 12px;
    height: 12px;
    background: rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    pointer-events: all;
    transition: transform 0.2s, background-color 0.2s;
    z-index: 3;
    cursor: crosshair;
}

.anchor-point:hover,
.anchor-point.highlight {
    background: rgba(59, 130, 246, 0.3);
    transform: translate(-50%, -50%) scale(1.2);
}

/* Edge drawing states */
.edge-drawing .anchor-point {
    background: rgba(59, 130, 246, 0.2);
}

.edge-drop-target {
    outline: 2px solid rgba(59, 130, 246, 0.3);
    outline-offset: 2px;
}

/* Anchor point positions */
.anchor-top {
    top: 0;
    left: 50%;
}

.anchor-right {
    top: 50%;
    right: 0;
    transform: translate(50%, -50%);
}

.anchor-right:hover,
.anchor-right.highlight {
    transform: translate(50%, -50%) scale(1.2);
}

.anchor-bottom {
    bottom: 0;
    left: 50%;
    transform: translate(-50%, 50%);
}

.anchor-bottom:hover,
.anchor-bottom.highlight {
    transform: translate(-50%, 50%) scale(1.2);
}

.anchor-left {
    top: 50%;
    left: 0;
    transform: translate(-50%, -50%);
}

.anchor-left:hover,
.anchor-left.highlight {
    transform: translate(-50%, -50%) scale(1.2);
}

/* Edge connection validation states */
.edge-preview.valid-connection {
    stroke: #22c55e;
}

.edge-preview.invalid-connection {
    stroke: #ef4444;
}

/* Node interaction states */
.node.edge-drawing {
    outline: 2px solid rgba(59, 130, 246, 0.3);
    outline-offset: 2px;
}

.node.edge-target {
    outline: 2px solid rgba(34, 197, 94, 0.3);
    outline-offset: 2px;
}

.node.invalid-target {
    outline: 2px solid rgba(239, 68, 68, 0.3);
    outline-offset: 2px;
}

/* Edge Markers */
#arrowhead {
    fill: #000;
}

#arrowhead-preview {
    fill: #666;
}

#arrowhead-selected,
#arrowhead-highlighted {
    fill: #3b82f6;
}

/* Edge Selection Tooltip */
.edge-tooltip {
    position: absolute;
    background: white;
    border-radius: 4px;
    padding: 4px 8px;
    font-size: 12px;
    pointer-events: none;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    transition: opacity 0.2s;
}

/* Support for high DPI screens */
@media (min-resolution: 2dppx) {
    .edge-path {
        stroke-width: 1;
    }
    
    .edge-path:hover,
    .edge-path.selected {
        stroke-width: 1.5;
    }
}

/* Ensure SVG elements maintain crisp edges */
#canvas-edges * {
    transform-box: fill-box;
    transform-origin: 50% 50%;
}

/* Performance optimizations */
.edge-path,
.edge-hit-area {
    will-change: d, transform;
    transform: translate3d(0,0,0);
}

/* Reset any inherited transitions during drag */
.node.is-dragging ~ #canvas-edges * {
    transition: none !important;
    animation: none !important;
}